#summary Design goals, new and changed features.

= Fancytree Overview =

== Motivation ==

While !DynaTree seems to work well for many users, bug-fixing and implementation
of new features becomes increasingly difficult without breaking compatibility.

A new project name was chosen, so we can re-think and change the API, attribute 
names, events, default behavior, etc. - without confusing users that see references
to '!DynaTree' on mailing lists, or stackoverflow.

Still most concepts and implementations are based on !DynaTree, so we start off 
with release 2.0.


== Main design goals ==

  * More concise naming conventions.
  * Better compliance with the current jQuery.UI widget style guide.
  * Refactor to a more MVC-style design, so new features - like rendering as tree-grid becomes easier.
  * Robust, consistent handling of parallel, asynchronous behavior.
  * Allow to develop extensions as separate modules.


= What's New =

== Main concepts (inherited from !DynaTree) ==

Typically, jQuery Plugins wrap around an existing HTML element, tweak the 
appearance and add behavior.

Fancytree (as well as !DynaTree) take a different approach here.
We have a tree data structure as the backbone, i.e. a `Fancytree` object that
contains a hierarchical structure of `FancytreeNode`s.

This structure can be initialized by parsing an `<ul>` element, as well as 
sending an Ajax request or supply an JavaScript data structure or generator 
function.

The tree can be accessed and modified using an extensive API like `tree.findNode()` 
or `node.setExpanded()`.

The HTML markup is only rendered on demand. If a large tree with 10.000
nodes is partly expanded, only those visible nodes will have DOM elements.


== New features ==

(*Note:* Not all of this is yet finished.)

  * More robust on (parallel) asynchronous operations (using deferreds/promises)
  * Better maintainability using an extension-module pattern<br>The final design was inspired by http://www.jstree.com/, which features a pretty cool plugin concept:<br>credits to Ivan Bozhanov!
  * More flexible initialization (unified `source` option)
  * More consistent API, using naming conventions and best practice from jQuery UI widgets.
  * Table tree support ([http://wwwendt.de/tech/fancytree/demo/sample-ext-table.html example])
  * Mac-style [column view] support ([http://wwwendt.de/tech/fancytree/demo/sample-ext-columnview.html example])
  * The tree now behaves more like a form control, i.e. it is 'tababble' ([http://wwwendt.de/tech/fancytree/demo/sample-form.html example]).
  * Filter support ([http://wwwendt.de/tech/fancytree/demo/sample-ext-filter.html example]).
  * [http://www.w3.org/WAI/intro/aria.php WAI-ARIA] support
  * Html markup changed (not using `<a>` tags).
  * New skins (windows 7, Lion)


== Other improvements ==

  * The tool chain was changed to use [http://nodejs.org node], [http://gruntjs.com grunt], and [http://qunitjs.com/ QUnit].
  * Using a [http://en.wikipedia.org/wiki/Distributed_revision_control DVCS] instead of Subversion (currently [http://mercurial.selenic.com mercurial] but thinking about [https://github.com GitHub] / [http://git-scm.com git]).
  * The code uses [http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/ strict mode] and passes [http://www.jshint.com JS Hint].
  * API documentation now based on [https://github.com/jsdoc3/jsdoc#readme JSDoc 3] ([http://wwwendt.de/tech/fancytree/doc/jsdoc/index.html browse the API docs]).
  * Test coverage was improved ([http://wwwendt.de/tech/fancytree/test/unit/test-core.html run unit tests]).
  * smaller?
  * faster?


== Dropped features ==

  * Required minimum versions for jQuery have been lifted to jQuery 1.5+ (1.6+ recommended) and jQuery UI 1.8.6+
  * jQueryUI 1.10 [http://jqueryui.com/upgrade-guide/1.10/#removed-support-for-ie6 removed support for IE 6]
  * `onDeactivate` event was removed (use `activate` and check `data.node.isActive()` instead).


== Main changes to !DynaTree ==

See also HowtoMigration for details.

  * Most attribute names, event names and method signatures have changed.
{{{
// Fancytree              vs DynaTree
// Attributes
node.expanded             <= was node.bExpanded 

// Methods
node.toggleSelected()     <= was node.toggleSelect() 
node.setSelected()        <= node.select()

// Events
beforeexpand(event, data)  <= onQueryExpand(flag, node)
select(event, data)       <= onSelect(flag, node)

// Options
source                    <= initAjax, init
}}}

  * Some functionality is enabled as extension:
  {{{
    $("#tree").fancytree({
      extensions: ["persistence", "dnd"],
      [...]
    });
  }}}
  * New `source` option  for generalized initialization:
  {{{
    $("#tree").fancytree({
      // source may be Ajax options, a pointer to a <ul> element, a callback, ...
      source: {
        url: "/getTopLevelNodesAsJson"
      },
      lazyload: function(e, data){
        // return a source in 'data.result'
        data.result = {
          url: "/getChildrenAsJson",
          data: {key: data.node.key}
        };
      },
      [...]
    });
  }}}
  * All events have been renamed according to common jQuery widget style.
 Event arguments have been unified to `data`.
 {{{
    activate: function(event, data) {
        var node = data.node;
        alert("activated #" + node.key);
    },
    queryselect: function(event, data) {
        logEvent(event, data, "current state=" + data.node.isSelected());
        // return false to prevent default behavior (i.e. selecting or deselecting)
        if( data.node.isFolder() ){
            return false;
        }
    },
    select: function(event, data) {
        logEvent(event, data, "current state=" + data.node.isSelected());
        var s = data.tree.getSelectedNodes().join(", ");
        $("#echoSelected").text(s);
    },
 }}}
  * The generated markup has changed (structure and class names).
  * Most asynchronous methods now return [http://api.jquery.com/deferred.promise/ `$.promise`] so handling deferred responses is easy:
    {{{
    node.setExpanded().done(function(){
        alert("expand animation has finished");
    });
    }}}
